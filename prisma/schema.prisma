// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                String   @id @default(cuid())
  name              String
  description       String?
  history           String?  // Detailed history/description for web presentation
  address           String
  latitude          Float
  longitude         Float
  phone             String?
  email             String?
  website           String?
  principalImage    String?
  images            String[] // Array of image URLs
  identificationNumber String?
  ownerId           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  owner             Owner?   @relation(fields: [ownerId], references: [id])
  restaurantRecipes RestaurantRecipe[]

  @@map("restaurants")
}

model Owner {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  restaurants Restaurant[]

  @@map("owners")
}

model Recipe {
  id           String   @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  restaurantRecipes RestaurantRecipe[]

  @@map("recipes")
}

model RestaurantRecipe {
  id           String @id @default(cuid())
  restaurantId String
  recipeId     String
  createdAt    DateTime @default(now())

  // Relations
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([restaurantId, recipeId])
  @@map("restaurant_recipes")
}

model Operator {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  phone          String?
  identification String   @unique
  password       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("operators")
}
